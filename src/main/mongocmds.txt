> db.help()
DB methods:
        db.adminCommand(nameOrDocument) - switches to 'admin' db, and runs command [just calls db.runCommand(...)]
        db.aggregate([pipeline], {options}) - performs a collectionless aggregation on this database; returns a cursor
        db.auth(username, password)
        db.cloneDatabase(fromhost) - deprecated
        db.commandHelp(name) returns the help for the command
        db.copyDatabase(fromdb, todb, fromhost) - deprecated
        db.createCollection(name, {size: ..., capped: ..., max: ...})
        db.createView(name, viewOn, [{$operator: {...}}, ...], {viewOptions})
        db.createUser(userDocument)
        db.currentOp() displays currently executing operations in the db
        db.dropDatabase(writeConcern)
        db.eval() - deprecated
        db.fsyncLock() flush data to disk and lock server for backups
        db.fsyncUnlock() unlocks server following a db.fsyncLock()
        db.getCollection(cname) same as db['cname'] or db.cname
        db.getCollectionInfos([filter]) - returns a list that contains the names and options of the db's collections
        db.getCollectionNames()
        db.getLastError() - just returns the err msg string
        db.getLastErrorObj() - return full status object
        db.getLogComponents()
        db.getMongo() get the server connection object
        db.getMongo().setSlaveOk() allow queries on a replication slave server
        db.getName()
        db.getPrevError()
        db.getProfilingLevel() - deprecated
        db.getProfilingStatus() - returns if profiling is on and slow threshold
        db.getReplicationInfo()
        db.getSiblingDB(name) get the db at the same server as this one
        db.getWriteConcern() - returns the write concern used for any operations on this db, inherited from server object if set
        db.hostInfo() get details about the server's host
        db.isMaster() check replica primary status
        db.hello() check replica primary status
        db.killOp(opid) kills the current operation in the db
        db.listCommands() lists all the db commands
        db.loadServerScripts() loads all the scripts in db.system.js
        db.logout()
        db.printCollectionStats()
        db.printReplicationInfo()
        db.printShardingStatus()
        db.printSecondaryReplicationInfo(()
        db.dropUser(username)
        db.repairDatabase()
        db.resetError()
        db.runCommand(cmdObj) run a database command.  if cmdObj is a string, turns it into {cmdObj: 1}
        db.serverStatus()
        db.setLogLevel(level,<component>)
        db.setProfilingLevel(level,slowms) 0=off 1=slow 2=all
        db.setWriteConcern(<write concern doc>) - sets the write concern for writes to the db
        db.unsetWriteConcern(<write concern doc>) - unsets the write concern for writes to the db
        db.setVerboseShell(flag) display extra information in shell output
        db.shutdownServer()
        db.stats()
        db.version() current version of the server
> db.stats()
{
        "db" : "employee",
        "collections" : 0,
        "views" : 0,
        "objects" : 0,
        "avgObjSize" : 0,
        "dataSize" : 0,
        "storageSize" : 0,
        "numExtents" : 0,
        "indexes" : 0,
        "indexSize" : 0,
        "fileSize" : 0,
        "fsUsedSize" : 0,
        "fsTotalSize" : 0,
        "ok" : 1
}
> db
employee
> db.dropDatabase()
{ "ok" : 1 }
> db
employee
> db.createCollection("person")
{ "ok" : 1 }
> db.person.insertMany([{"id":1,status:"Active"},{"id":2,status:"Hold"},{"id":3,status:"Pending"}])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("64ed9f34d26b3b29a3c5db6a"),
                ObjectId("64ed9f34d26b3b29a3c5db6b"),
                ObjectId("64ed9f34d26b3b29a3c5db6c")
        ]
}
> collectionName.insertOne({"id":4,status:"Active"})
2023-08-29T11:36:22.485+0400 E QUERY    [js] ReferenceError: collectionName is not defined :
@(shell):1:1
> db.person.insertOne({"id":4,status:"Active"})
{
        "acknowledged" : true,
        "insertedId" : ObjectId("64eda015d26b3b29a3c5db6d")
}
> db.person.find()
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6a"), "id" : 1, "status" : "Active" }
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6b"), "id" : 2, "status" : "Hold" }
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6c"), "id" : 3, "status" : "Pending" }
{ "_id" : ObjectId("64eda015d26b3b29a3c5db6d"), "id" : 4, "status" : "Active" }
> db.person.find({ id: { $eq: 4 }});
{ "_id" : ObjectId("64eda015d26b3b29a3c5db6d"), "id" : 4, "status" : "Active" }
> db.person.findOne()
{
        "_id" : ObjectId("64ed9f34d26b3b29a3c5db6a"),
        "id" : 1,
        "status" : "Active"
}
> db.person.find()
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6a"), "id" : 1, "status" : "Active" }
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6b"), "id" : 2, "status" : "Hold" }
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6c"), "id" : 3, "status" : "Pending" }
{ "_id" : ObjectId("64eda015d26b3b29a3c5db6d"), "id" : 4, "status" : "Active" }
> db.person.find().pretty()
{
        "_id" : ObjectId("64ed9f34d26b3b29a3c5db6a"),
        "id" : 1,
        "status" : "Active"
}
{
        "_id" : ObjectId("64ed9f34d26b3b29a3c5db6b"),
        "id" : 2,
        "status" : "Hold"
}
{
        "_id" : ObjectId("64ed9f34d26b3b29a3c5db6c"),
        "id" : 3,
        "status" : "Pending"
}
{
        "_id" : ObjectId("64eda015d26b3b29a3c5db6d"),
        "id" : 4,
        "status" : "Active"
}
> db.person.updateOne({"status" : "Active"},{$set : {"id": 10}}  )
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.person.find()
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6a"), "id" : 10, "status" : "Active" }
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6b"), "id" : 2, "status" : "Hold" }
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6c"), "id" : 3, "status" : "Pending" }
{ "_id" : ObjectId("64eda015d26b3b29a3c5db6d"), "id" : 4, "status" : "Active" }
> db.person.update({"status" : "Active"},{$set : {"id": 10}}  )
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })
> db.person.find()
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6a"), "id" : 10, "status" : "Active" }
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6b"), "id" : 2, "status" : "Hold" }
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6c"), "id" : 3, "status" : "Pending" }
{ "_id" : ObjectId("64eda015d26b3b29a3c5db6d"), "id" : 4, "status" : "Active" }
> db.person.updateMany({"status" : "Active"},{$set : {"id": 10}}  )
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 1 }
> db.person.find()
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6a"), "id" : 10, "status" : "Active" }
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6b"), "id" : 2, "status" : "Hold" }
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6c"), "id" : 3, "status" : "Pending" }
{ "_id" : ObjectId("64eda015d26b3b29a3c5db6d"), "id" : 10, "status" : "Active" }
> db.person.deleteOne({"product" : "bread"})
{ "acknowledged" : true, "deletedCount" : 0 }
> db.person.deleteOne({"status" : "Hold"})
{ "acknowledged" : true, "deletedCount" : 1 }
> db.person.find()
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6a"), "id" : 10, "status" : "Active" }
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6c"), "id" : 3, "status" : "Pending" }
{ "_id" : ObjectId("64eda015d26b3b29a3c5db6d"), "id" : 10, "status" : "Active" }
> db.person.insertMany([{"id":8,status:"Active"},{"id":7,status:"Hold"},{"id":6,status:"Pending"}])
{
        "acknowledged" : true,
        "insertedIds" : [
                ObjectId("64eda9f9d26b3b29a3c5db6e"),
                ObjectId("64eda9f9d26b3b29a3c5db6f"),
                ObjectId("64eda9f9d26b3b29a3c5db70")
        ]
}
> db.person.find()
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6a"), "id" : 10, "status" : "Active" }
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6c"), "id" : 3, "status" : "Pending" }
{ "_id" : ObjectId("64eda015d26b3b29a3c5db6d"), "id" : 10, "status" : "Active" }
{ "_id" : ObjectId("64eda9f9d26b3b29a3c5db6e"), "id" : 8, "status" : "Active" }
{ "_id" : ObjectId("64eda9f9d26b3b29a3c5db6f"), "id" : 7, "status" : "Hold" }
{ "_id" : ObjectId("64eda9f9d26b3b29a3c5db70"), "id" : 6, "status" : "Pending" }
> db.person.deleteMany({"status" : "Pending"})
{ "acknowledged" : true, "deletedCount" : 2 }
> db.person.find()
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6a"), "id" : 10, "status" : "Active" }
{ "_id" : ObjectId("64eda015d26b3b29a3c5db6d"), "id" : 10, "status" : "Active" }
{ "_id" : ObjectId("64eda9f9d26b3b29a3c5db6e"), "id" : 8, "status" : "Active" }
{ "_id" : ObjectId("64eda9f9d26b3b29a3c5db6f"), "id" : 7, "status" : "Hold" }
> show dbs
ProductDB  0.000GB
admin      0.000GB
config     0.000GB
employee   0.000GB
local      0.000GB
> db.person.distinct("status")
[ "Active", "Hold" ]
> db.person.find()
{ "_id" : ObjectId("64ed9f34d26b3b29a3c5db6a"), "id" : 10, "status" : "Active" }
{ "_id" : ObjectId("64eda015d26b3b29a3c5db6d"), "id" : 10, "status" : "Active" }
{ "_id" : ObjectId("64eda9f9d26b3b29a3c5db6e"), "id" : 8, "status" : "Active" }
{ "_id" : ObjectId("64eda9f9d26b3b29a3c5db6f"), "id" : 7, "status" : "Hold" }
> db.person.renameCollection('employee_info')
{ "ok" : 1 }
>




